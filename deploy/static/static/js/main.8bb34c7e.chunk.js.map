{"version":3,"sources":["ScoreEntry.js","Row.js","Topic.js","GradeTable.js","FinalNeededScoreRow.js","FinalNeededScoreTable.js","GradePlanner.js","FutureCheckBox.js","App.js","serviceWorker.js","index.js"],"names":["valid","x","Number","isNaN","undefined","ScoreEntry","handleClick","e","stopPropagation","react_default","a","createElement","className","type","value","this","props","placeholder","min","step","onClick","onChange","readOnly","Component","formatScore","score","parseFloat","toFixed","Row","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","collapse","expand","nameRef","React","createRef","scoreRef","collapsed","prevProps","_this2","childrenCollapsed","future","ScoreEntry_ScoreEntry","plannedScore","name","target","maxScore","concat","style","paddingLeft","indent","aria-label","aria-hidden","ref","Topic","toggleCollapse","setState","state","rows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","schema","children","Symbol","iterator","next","done","elem","isTopic","push","data","planned","plannedTotals","key","length","onFutureScoreChange","Row_Row","err","return","displayedMaxScore","futureMaxScore","Fragment","GradeTable","map","index","Topic_Topic","scoreHeader","scope","width","FinalNeededScoreRow","grade","FinalNeededScoreTable","i","needed","grades","BINS","GRADES","GradePlanner","_props$data","Homework","Projects","Lab","onSetCourseworkToMax","Midterm","participation","totalNonFinal","recoveredMidtermPoints","examRecovery","thresholdLookup","rawFinalScore","getGrade","_i2","_GRADES","_i","_BINS","bin","Math","max","onSetParticipationToMax","examScore","maxExamScore","recoveryCap","halfScore","bins","FutureCheckBox","id","checked","htmlFor","range","b","out","cappedScore","child","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Assignment","weighting","Future","ASSIGNMENTS","toConsumableArray","LOOKUP","App_i","_ASSIGNMENTS","initializeLookup","assignment","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","extend","scores","JSON","parse","stringify","_Object$keys","keys","NaN","App","handleFutureCheckboxChange","plannedScores","handleFutureScoreChange","newScore","forceUpdate","recursivelyMaximize","topic","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","handleSetCourseworkToMax","handleSetParticipationToMax","$","get","success","header","window","location","replace","curr","totals","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","computeTotals","limit","_i3","_ASSIGNMENTS2","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bb34c7e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ScoreEntry.css\";\n\nfunction valid(x) {\n    return !Number.isNaN(x) && (x !== undefined);\n}\n\nexport default class ScoreEntry extends Component {\n    handleClick = (e) => {\n        e.stopPropagation();\n    };\n\n    render() {\n        return (\n            <input\n                className=\"ScoreEntry\"\n                type=\"number\"\n                value={valid(this.props.value) ? this.props.value : \"\"}\n                placeholder={valid(this.props.placeholder) ? this.props.placeholder : \"\"}\n                min=\"0\"\n                step=\"0.1\"\n                onClick={this.handleClick}\n                onChange={this.props.onChange}\n                readOnly={this.props.readOnly}\n            />\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"./Row.css\";\nimport ScoreEntry from \"./ScoreEntry.js\";\n\nfunction formatScore(score) {\n    return Number.parseFloat(score).toFixed(1);\n}\n\nexport default class Row extends Component {\n    constructor(props) {\n        super(props);\n        this.nameRef = React.createRef();\n        this.scoreRef = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props.collapsed) {\n            this.collapse();\n        } else {\n            this.expand();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.collapsed !== this.props.collapsed) {\n            if (this.props.collapsed) {\n                this.collapse();\n            } else {\n                this.expand();\n            }\n        }\n    }\n\n    collapse = () => {\n        // $(this.nameRef.current).collapse(\"hide\");\n        // $(this.scoreRef.current).collapse(\"hide\");\n    };\n\n    expand = () => {\n        // $(this.nameRef.current).collapse(\"show\");\n        // $(this.scoreRef.current).collapse(\"show\");\n    };\n\n    render() {\n        let className = \"Row\";\n        if (this.props.collapsed) {\n            className += \" closed\";\n        }\n        if (this.props.childrenCollapsed !== undefined) {\n            className += \" pointable\";\n        }\n\n        const score = Number.isNaN(this.props.score) || this.props.future\n            ? (\n                <ScoreEntry\n                    value={this.props.plannedScore}\n                    placeholder={this.props.placeholder}\n                    readOnly={this.props.readOnly}\n                    onChange={e => this.props.onChange(this.props.name, e.target.value)}\n                />\n            ) : formatScore(this.props.score);\n\n        const maxScore = this.props.maxScore ? ` / ${formatScore(this.props.maxScore)}` : \"\";\n\n        return (\n            <tr onClick={this.props.onClick} className={className}>\n                <td style={{ paddingLeft: 10 + 40 * this.props.indent }}>\n                    {this.props.childrenCollapsed !== undefined ? (\n                        <button type=\"button\" className=\"close closeButton\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">{this.props.childrenCollapsed ? \"+\" : \"-\"}</span>\n                        </button>\n                    ) : false}\n\n                    <div ref={this.nameRef} className=\"collapse show\">\n                        {this.props.name}\n                    </div>\n                </td>\n                <td>\n                    <div ref={this.scoreRef} className=\"collapse show\">\n                        {score}\n                        {maxScore}\n                    </div>\n                </td>\n            </tr>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Row from \"./Row.js\";\n\nexport default class Topic extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: true,\n        };\n    }\n\n    toggleCollapse = () => {\n        this.setState(state => ({ collapsed: !state.collapsed }));\n    };\n\n    render() {\n        const rows = [];\n\n        const readOnly = false;\n\n        for (const elem of this.props.schema.children) {\n            if (!this.props.future && elem.future) {\n                continue;\n            }\n            if (!elem.isTopic) {\n                rows.push(\n                    <Row\n                        name={elem.name}\n                        score={this.props.data[elem.name]}\n                        plannedScore={this.props.planned[elem.name]}\n                        placeholder={this.props.plannedTotals[elem.name]}\n                        maxScore={elem.maxScore}\n                        future={elem.future}\n                        key={rows.length}\n                        indent={this.props.indent + 1}\n                        collapsed={this.props.collapsed || this.state.collapsed}\n                        onChange={this.props.onFutureScoreChange}\n                    />,\n                );\n            } else {\n                rows.push(\n                    <Topic\n                        schema={elem}\n                        data={this.props.data}\n                        planned={this.props.planned}\n                        plannedTotals={this.props.plannedTotals}\n                        readOnly={readOnly}\n                        key={rows.length}\n                        indent={this.props.indent + 1}\n                        collapsed={this.props.collapsed || this.state.collapsed}\n                        future={this.props.future}\n                        onFutureScoreChange={this.props.onFutureScoreChange}\n                    />,\n                );\n            }\n        }\n\n        const displayedMaxScore = this.props.future\n            ? this.props.schema.futureMaxScore : this.props.schema.maxScore;\n\n        return (\n            <>\n                <Row\n                    name={this.props.schema.name}\n                    score={this.props.data[this.props.schema.name]}\n                    plannedScore={this.props.planned[this.props.schema.name]}\n                    placeholder={this.props.plannedTotals[this.props.schema.name]}\n                    readOnly={this.props.readOnly}\n                    maxScore={displayedMaxScore}\n                    onClick={this.toggleCollapse}\n                    indent={this.props.indent}\n                    childrenCollapsed={this.state.collapsed}\n                    collapsed={this.props.collapsed}\n                    onChange={this.props.onFutureScoreChange}\n                />\n                {rows}\n            </>\n        );\n    }\n}\n","/* eslint-disable react/no-array-index-key */\nimport React from \"react\";\nimport Topic from \"./Topic.js\";\n\nexport default function GradeTable(props) {\n    const rows = props.schema.map((elem, index) => (\n        <Topic\n            schema={elem}\n            data={props.data}\n            planned={props.planned}\n            plannedTotals={props.plannedTotals}\n            indent={0}\n            key={index}\n            future={props.future}\n            onFutureScoreChange={props.onFutureScoreChange}\n        />\n    ));\n\n    const scoreHeader = props.future ? \"Expected / Maximum score eventually possible\" :\n        \"Current / Maximum score possible so far\";\n\n    return (\n        <table className=\"table table-hover\">\n            <thead>\n                <tr>\n                    <th scope=\"col\" style={{ width: \"50%\" }}>Assignment</th>\n                    <th scope=\"col\" style={{ width: \"25%\" }}>{scoreHeader}</th>\n                </tr>\n            </thead>\n            <tbody>\n                { rows }\n            </tbody>\n        </table>\n    );\n}\n","import React from \"react\";\n\nexport default function FinalNeededScoreRow(props) {\n    if (props.score > 80) {\n        return null;\n    }\n    return (\n        <tr>\n            <th scope=\"row\">{props.grade}</th>\n            <td>{props.score}</td>\n        </tr>\n    );\n}\n","import React from \"react\";\nimport FinalNeededScoreRow from \"./FinalNeededScoreRow.js\";\n\nexport default function FinalNeededScoreTable(props) {\n    const rows = [];\n    for (let i = 0; i !== props.needed.length; ++i) {\n        rows.push(<FinalNeededScoreRow key={i} grade={props.grades[i]} score={props.needed[i]} />);\n    }\n\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Grade</th>\n                    <th scope=\"col\">Minimum score needed on final</th>\n                </tr>\n            </thead>\n            <tbody>\n                {rows}\n            </tbody>\n        </table>\n    );\n}\n","import React from \"react\";\nimport FinalNeededScoreTable from \"./FinalNeededScoreTable.js\";\n\nconst BINS = [294, 283, 270, 255, 230, 215, 200, 190, 180, 175, 170, 165, 0];\nconst GRADES = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"F\"];\n\nexport default function GradePlanner(props) {\n    const { Homework, Projects, Lab } = props.data;\n    if (!(Homework && Projects && Lab)) {\n        return (\n            <>\n                <div className=\"card\">\n                    <h5 className=\"card-header\">Grade Planning</h5>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Insufficient Data</h5>\n                        <p className=\"card-text\">\n                            You need to specify your expected homework, project,\n                            and lab scores in the below table to enable grade planning.\n                        </p>\n                        <p>\n                            Or click the button to set them all to the maximum (including extra\n                            credit)!\n                        </p>\n                        <button\n                            className=\"btn btn-primary\"\n                            type=\"button\"\n                            onClick={props.onSetCourseworkToMax}\n                        >\n                            Set all unknown non-exam scores to maximum\n                        </button>\n                    </div>\n                </div>\n                <br />\n            </>\n        );\n    }\n\n    const { Midterm } = props.data;\n    const participation = props.data[\"Participation Credits\"];\n\n    const totalNonFinal = Midterm + Homework + Projects + Lab;\n\n    if (!participation) {\n        const needed = [];\n\n        for (const bin of BINS) {\n            needed.push(Math.max(0, bin - totalNonFinal));\n            if (needed[needed.length - 1] === 0) {\n                break;\n            }\n        }\n\n        return (\n            <>\n                <div className=\"card\">\n                    <h5 className=\"card-header\">Grade Planning</h5>\n                    <div className=\"card-body\">\n                        <FinalNeededScoreTable\n                            grades={GRADES}\n                            needed={needed}\n                        />\n                        <p className=\"card-text\">\n                            To take exam recovery points into account, specify\n                            an estimate of your participation credits. Or click the button to set\n                            them all to the maximum!\n                        </p>\n                        <button\n                            className=\"btn btn-primary\"\n                            type=\"button\"\n                            onClick={props.onSetParticipationToMax}\n                        >\n                            Set all unknown participation credits to maximum\n                        </button>\n                    </div>\n                </div>\n                <br />\n            </>\n        );\n    } else {\n        const recoveredMidtermPoints = examRecovery(Midterm, participation, 60, 20);\n        const thresholdLookup = {};\n        for (let rawFinalScore = 300; rawFinalScore >= 0; --rawFinalScore) {\n            const recoveredFinalPoints = examRecovery(rawFinalScore, participation, 80, 20);\n            const grade = getGrade(\n                totalNonFinal + recoveredMidtermPoints + rawFinalScore + recoveredFinalPoints,\n                BINS,\n                GRADES,\n            );\n            thresholdLookup[grade] = rawFinalScore;\n        }\n        const needed = [];\n        for (const grade of GRADES) {\n            if (thresholdLookup[grade] !== undefined) {\n                needed.push(thresholdLookup[grade]);\n            }\n        }\n        return (\n            <>\n                <div className=\"card\">\n                    <h5 className=\"card-header\">Grade Planning</h5>\n                    <div className=\"card-body\">\n                        <FinalNeededScoreTable\n                            grades={GRADES}\n                            needed={needed}\n                        />\n                    </div>\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nfunction examRecovery(examScore, participation, maxExamScore, recoveryCap) {\n    const halfScore = maxExamScore / 2;\n    const maxRecovery = Math.max(0, (halfScore - examScore) / 2);\n    const recoveryRatio = Math.min(participation, recoveryCap) / recoveryCap;\n    return maxRecovery * recoveryRatio;\n}\n\nfunction getGrade(score, bins, grades) {\n    for (let i = 0; i !== bins.length; ++i) {\n        if (score >= bins[i]) {\n            return grades[i];\n        }\n    }\n    return \"F\";\n}\n","import React from \"react\";\n\nexport default function FutureCheckBox(props) {\n    return (\n        <div className=\"custom-control custom-checkbox\">\n            <input type=\"checkbox\" className=\"custom-control-input\" id=\"futureCheckBox\" checked={props.checked} onChange={props.onChange} />\n            <label className=\"custom-control-label\" htmlFor=\"futureCheckBox\">\n                Show unreleased / ungraded assignments and enable grade planning.\n            </label>\n        </div>\n    );\n}\n","/* eslint-disable no-param-reassign,dot-notation */\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport \"./App.css\";\nimport $ from \"jquery\";\nimport GradeTable from \"./GradeTable.js\";\nimport GradePlanner from \"./GradePlanner.js\";\nimport FutureCheckBox from \"./FutureCheckBox.js\";\n\nfunction range(a, b) {\n    if (!b) {\n        b = a;\n        a = 0;\n    }\n    const out = [];\n    for (let i = a; i !== b; ++i) {\n        out.push(i);\n    }\n    return out;\n}\n\nfunction Topic(name, children, cappedScore) {\n    if (!cappedScore) {\n        cappedScore = 1000000000;\n    }\n    let maxScore = 0;\n    for (const child of children) {\n        if (!child.future) {\n            maxScore += child.maxScore;\n        }\n    }\n    let futureMaxScore = 0;\n    for (const child of children) {\n        futureMaxScore += child.futureMaxScore;\n    }\n    maxScore = Math.min(cappedScore, maxScore);\n    futureMaxScore = Math.min(cappedScore, futureMaxScore);\n    return {\n        isTopic: true, name, children, maxScore, futureMaxScore,\n    };\n}\n\nfunction Assignment(name, maxScore, weighting) {\n    if (!weighting) {\n        weighting = 1;\n    }\n    return {\n        isTopic: false, name, maxScore, futureMaxScore: maxScore, weighting,\n    };\n}\n\nfunction Future(elem) {\n    elem.future = true;\n    return elem;\n}\n\nconst ASSIGNMENTS = [\n    Topic(\"Raw Score\", [\n        Topic(\"Exams\", [\n            Assignment(\"Midterm\", 60),\n            Future(Assignment(\"Final\", 80)),\n        ]),\n        Topic(\"Homework\",\n            [\n                Assignment(\"Homework 0 (Total)\", 2),\n                ...range(1, 2).map(i => Assignment(`Homework ${i} (Total)`, 4)),\n                ...range(2, 8).map(i => Future(Assignment(`Homework ${i} (Total)`, 4)))]),\n        Topic(\"Projects\", [\n            Topic(\"Hog\", [\n                Assignment(\"Hog (Total)\", 22),\n                Assignment(\"Hog (Composition)\", 2),\n                Assignment(\"Hog Checkpoint (Total)\", 1),\n            ]),\n            Future(Topic(\"Typing Test\", [\n                Assignment(\"Typing Test (Total)\", 16),\n                Assignment(\"Typing Test Checkpoint 1 (Total)\", 1),\n                Assignment(\"Typing Test Checkpoint 2 (Total)\", 1),\n                Assignment(\"Typing Test (Composition)\", 2),\n                Assignment(\"Typing Test (Extra Credit)\", 1),\n            ])),\n            Future(Topic(\"Ants\", [\n                Assignment(\"Ants (Total)\", 27),\n                Assignment(\"Ants Checkpoint (Total)\", 1),\n                Assignment(\"Ants (Composition)\", 2),\n            ])),\n            Future(Topic(\"Scheme\", [\n                Assignment(\"Scheme (Total)\", 31),\n                Assignment(\"Scheme Checkpoint 1 (Total)\", 1),\n                Assignment(\"Scheme Checkpoint 2 (Total)\", 1),\n                Assignment(\"Scheme (Composition)\", 2),\n            ])),\n        ]),\n        Topic(\"Lab\", [\n            ...range(4).map(i => Assignment(`Lab ${i} (Total)`, 2, 2)),\n            ...range(4, 10).map(i => Future(Assignment(`Lab ${i} (Total)`, 2, 2))),\n        ]),\n    ]),\n    Topic(\"Participation Credits\", [\n        Topic(\"Discussion Attendance\", [\n            ...range(2).map(i => Assignment(`Discussion ${i} (Total)`, 1)),\n            ...range(2, 14).map(i => Future(Assignment(`Discussion ${i} (Total)`, 1))),\n        ]),\n        Topic(\"Lab Attendance\", [\n            ...range(14).map(i => Future(Assignment(`Lab Attendance ${i} (Total)`, 1))),\n        ]),\n    ], 20),\n];\n\nconst LOOKUP = {};\n\nfor (const assignment of ASSIGNMENTS) {\n    initializeLookup(assignment);\n}\n\nfunction initializeLookup(assignment) {\n    LOOKUP[assignment.name] = assignment;\n    if (assignment.isTopic) {\n        for (const child of assignment.children) {\n            initializeLookup(child);\n        }\n    }\n}\n\nfunction extend(scores) {\n    const out = JSON.parse(JSON.stringify(scores));\n    for (const key of Object.keys(LOOKUP)) {\n        if (out[key] === undefined) {\n            out[key] = NaN;\n        }\n    }\n    return out;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scores: [],\n            plannedScores: [],\n            future: false,\n        };\n    }\n\n    async componentDidMount() {\n        const { success, header, data } = await $.get(\"./query\");\n        const scores = {};\n        if (success) {\n            for (let i = 0; i !== header.length; ++i) {\n                if (LOOKUP[header[i]]) {\n                    scores[header[i]] = data[i] * LOOKUP[header[i]].weighting;\n                }\n            }\n        } else {\n            window.location.replace(\"./login\");\n        }\n        this.setState({ scores, plannedScores: extend(scores) });\n    }\n\n    handleFutureCheckboxChange = () => {\n        this.setState(state => ({ future: !state.future, plannedScores: extend(state.scores) }));\n    };\n\n    handleFutureScoreChange = (name, newScore) => {\n        this.state.plannedScores[name] = newScore === \"\" ? NaN : newScore;\n        this.forceUpdate(); // sorry!\n    };\n\n    recursivelyMaximize = (topic, plannedScores) => {\n        if (!topic.isTopic) {\n            if (Number.isNaN(plannedScores[topic.name])) {\n                plannedScores[topic.name] = topic.maxScore;\n            }\n        } else {\n            for (const child of topic.children) {\n                this.recursivelyMaximize(child, plannedScores);\n            }\n        }\n    };\n\n    handleSetCourseworkToMax = () => {\n        this.recursivelyMaximize(LOOKUP[\"Homework\"], this.state.plannedScores);\n        this.recursivelyMaximize(LOOKUP[\"Projects\"], this.state.plannedScores);\n        this.recursivelyMaximize(LOOKUP[\"Lab\"], this.state.plannedScores);\n        this.forceUpdate();\n    };\n\n    handleSetParticipationToMax = () => {\n        this.recursivelyMaximize(LOOKUP[\"Participation Credits\"], this.state.plannedScores);\n        this.forceUpdate();\n    };\n\n    computeTotals(curr, scores, totals) {\n        if (curr.future && !this.state.future) {\n            return 0;\n        }\n        if (!curr.isTopic) {\n            totals[curr.name] = (scores[curr.name] !== undefined)\n                ? Number.parseFloat(scores[curr.name]) : NaN;\n            return totals[curr.name];\n        }\n        let out = 0;\n        for (const child of curr.children) {\n            out += this.computeTotals(child, scores, totals);\n        }\n\n        const limit = this.state.future ? curr.futureMaxScore : curr.maxScore;\n\n        if (limit) {\n            out = Math.min(out, limit);\n        }\n\n        totals[curr.name] = out;\n\n        if (scores[curr.name] !== undefined\n            && !Number.isNaN(Number.parseFloat(scores[curr.name]))) {\n            totals[curr.name] = Number.parseFloat(scores[curr.name]);\n            return totals[curr.name];\n        }\n\n        return out;\n    }\n\n    render() {\n        const totals = {};\n        const plannedTotals = {};\n\n        for (const assignment of ASSIGNMENTS) {\n            this.computeTotals(assignment, this.state.scores, totals);\n            this.computeTotals(assignment, this.state.plannedScores, plannedTotals);\n        }\n\n        return (\n            <div className=\"App container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <br />\n                        <h1 className=\"display-4\">\n                            <strong>61A</strong>\n                            {\" \"}\n                            Status Check\n                        </h1>\n                        <FutureCheckBox\n                            onChange={this.handleFutureCheckboxChange}\n                            checked={this.state.future}\n                        />\n                        {/* <LoginButton /> */}\n                        <br />\n                        {this.state.future && (\n                            <GradePlanner\n                                data={plannedTotals}\n                                onSetCourseworkToMax={this.handleSetCourseworkToMax}\n                                onSetParticipationToMax={this.handleSetParticipationToMax}\n                            />\n                        )}\n                        <GradeTable\n                            schema={ASSIGNMENTS}\n                            data={totals}\n                            planned={this.state.plannedScores}\n                            plannedTotals={plannedTotals}\n                            future={this.state.future}\n                            onFutureScoreChange={this.handleFutureScoreChange}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        ReactDOM.render(\n            <NextApp />,\n            document.getElementById(\"root\"),\n        );\n    });\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}